#!/usr/bin/env node

// まとめたモジュール
const modules = require('../app_modules');
// const app = modules.app;
const server = modules.server;
const config = require('../config');
const port = config.port;


server.listen(port);
console.log(`サーバが起動しました: http://localhost:${port}`);



// 以下、未整理

server.on('error', onError);
// server.on('listening', onListening);

// Normalize a port into a number,
// string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with
  // friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind
        + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// // Event listener for HTTP server "listening" event.
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   // debug('Listening on ' + bind);
// }
